##### path to config file #####
configfile: "scripts/config/config.yaml",

##### load rules #####
rule all:
     input:
        expand("tmp/{sample}.fastq", sample = config["samples"]),
        expand("tmp/{sample}.fastq", sample = config["samples"]),
        expand("results/fastqc_init/{sample}_fastqc.zip", sample = config["samples"]),
        expand("results/fastqc_init/{sample}_fastqc.html", sample = config["samples"]),
        expand("results/trim/{subsample}_1_trim_paired.fastq.gz", subsample = config["subsamples"]),
        expand("results/trim/{subsample}_1_trim_unpaired.fastq.gz", subsample = config["subsamples"]),
        expand("results/trim/{subsample}_2_trim_paired.fastq.gz", subsample = config["subsamples"]),
        expand("results/trim/{subsample}_2_trim_unpaired.fastq.gz", subsample = config["subsamples"]),
        expand("results/fastqc_post/{sample}_trim_paired_fastqc.zip", sample = config["samples"]),
        expand("results/fastqc_post/{sample}_trim_paired_fastqc.html", sample = config["samples"]),
        expand("results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam", subsample = config["subsamples"]),
        expand("results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam.bai", subsample = config["subsamples"]),
        expand("results/bowtie2/{subsample}.log", subsample = config["subsamples"]),
        expand("results/picard/{subsample}_trim_mapped_sorted_q2_nodup.bam", subsample = config["subsamples"]),
        expand("results/picard/{subsample}_trim_mapped_sorted_q2_nodup.bam.bai", subsample = config["subsamples"]),
        expand("results/picard/{subsample}_trim_mapped_sorted_q2_dups.txt", subsample = config["subsamples"]),
        expand("results/picard/{subsample}_trim_mapped_sorted_q2.log", subsample = config["subsamples"]),
        expand("results/deeptools/{subsample}.npz", subsample = config["multibam"]),
        expand("results/deeptools/{subsample}_heatmap_SpearmanCorr.png", subsample = config["multibam"]),
        expand("results/deeptools/{subsample}_heatmap_PearsonCorr.png" , subsample = config["multibam"]),
        expand("results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_model.r", subsample = config["subsamples"]),
        expand("results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_peaks.narrowPeak", subsample = config["subsamples"]),
        expand("results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_peaks.xls", subsample = config["subsamples"]),
        expand("results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_summits.bed", subsample = config["subsamples"]),
        expand("results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_0h_peaks.narrowPeak", subsample = config["concatenation"]),
        expand("results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_24h_peaks.narrowPeak", subsample = config["concatenation"]),
        expand("results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_common.bed" ,subsample = config["concatenation"]),
        expand("results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_0h_merged.bed", subsample = config["concatenation"]),
        expand("results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_24h_merged.bed", subsample = config["concatenation"]),
        expand("results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_0h_unique.bed", subsample = config["concatenation"]),
        expand("results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_24h_unique.bed", subsample = config["concatenation"])
rule unzip:
     input:
        "data/subset/{sample}.fastq.gz"
     output:
        temp("tmp/{sample}.fastq")
     shell:
        """
        mkdir -p tmp
        gunzip -c {input} > {output}
        """
rule fastqc_init:
     input:
        "tmp/{sample}.fastq"
     output:
        html = "results/fastqc_init/{sample}_fastqc.html",
        zip = "results/fastqc_init/{sample}_fastqc.zip"
     conda:
        "envs/qc.yaml"
     threads: 2
     log:
        "logs/fastqc_init_{sample}.log"
     message:
        "Executing Initial Quality Control on : {input}"
     shell:
        """
        mkdir -p results/fastqc_init
        fastqc {input} -o "results/fastqc_init" -t {threads} 2>{log}
        """
rule trim:
     input:
        fwd = "data/subset/{subsample}_1.fastq.gz",
        rev = "data/subset/{subsample}_2.fastq.gz"
     output:
        fwd_paired = "results/trim/{subsample}_1_trim_paired.fastq.gz",
        fwd_unpaired = "results/trim/{subsample}_1_trim_unpaired.fastq.gz",
        rev_paired = "results/trim/{subsample}_2_trim_paired.fastq.gz",
        rev_unpaired = "results/trim/{subsample}_2_trim_unpaired.fastq.gz"
     conda:
        "envs/trim.yaml"
     threads: 6
     log: 
        "logs/trim_{subsample}.log"
     message: 
        "Executing Trimming on : {input}"
     shell:
        """
        mkdir -p results/trim
        java -jar /home/ubuntu/atacseq/trimmomatic-0.38/trimmomatic-0.38.jar PE -threads {threads} \
        -trimlog results/trim/trim.log -summary results/trim/stats \
        {input.fwd} {input.rev} \
        {output.fwd_paired} {output.fwd_unpaired} {output.rev_paired} {output.rev_unpaired} \
        ILLUMINACLIP:data/NexteraPE-PE.fa:2:30:10:2:keepBothReads \
        LEADING:3 \
        TRAILING:3 \
        SLIDINGWINDOW:4:15 \
        MINLEN:33  2>{log}
        """
rule fastqc_post:
     input:
        "results/trim/{sample}_trim_paired.fastq.gz"
     output:
        html = "results/fastqc_post/{sample}_trim_paired_fastqc.html",
        zip = "results/fastqc_post/{sample}_trim_paired_fastqc.zip"
     conda:
        "envs/qc.yaml"
     threads: 2
     log:
        "logs/fastqc_post_{sample}.log"
     message:
        "Executing Post Trimming Quality Control on : {input}"
     shell:
        """
        mkdir -p results/fastqc_post
        fastqc {input} -o "results/fastqc_post" -t {threads} 2>{log}
        """
rule bowtie2:
     input:
        fwd = "results/trim/{subsample}_1_trim_paired.fastq.gz",
        rev = "results/trim/{subsample}_2_trim_paired.fastq.gz",
        idx_bt2 = "/home/ubuntu/atacseq/data/reference/Mus_musculus_GRCm39/bowtie2"
     output:
        bam = "results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam",
        bai = "results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam.bai",
        log = "results/bowtie2/{subsample}.log"
     conda:
        "envs/bowtie2.yaml"
     threads: 8
     log:
        "logs/bowtie2_{subsample}.log"
     message:
        "Executing Mapping on : {input}"
     shell:
        """
        mkdir -p results/bowtie2
        bowtie2  --very-sensitive -p 8 -k 10  -x {input.idx_bt2}/all  \
        -1 {input.fwd}  -2 {input.rev}  |  samtools view -q 2 -bS  -  |  samtools sort - -o {output.bam}
        samtools index -b {output.bam}
        samtools idxstats {output.bam} >{output.log}
        """
rule picard: 
     input:
        "results/bowtie2/{subsample}_trim_mapped_sorted_q2.bam"
     output:
        bam = "results/picard/{subsample}_trim_mapped_sorted_q2_nodup.bam",
        bai = "results/picard/{subsample}_trim_mapped_sorted_q2_nodup.bam.bai",
        txt = "results/picard/{subsample}_trim_mapped_sorted_q2_dups.txt",
        logg = "results/picard/{subsample}_trim_mapped_sorted_q2.log"
     conda:
        "envs/picard.yaml"
     threads: 6
     log:
        "logs/picard_{subsample}.log"
     message:
        "Eliminate duplicates : {input}"
     shell:
        """
        mkdir -p results/picard
        java -jar /home/ubuntu/atacseq/picard-2.18.25/picard.jar MarkDuplicates I="{input}" O={output.bam} \
        M={output.txt} REMOVE_DUPLICATES=true
        samtools index -b {output.bam}
        samtools idxstats {output.bam} > {output.logg}
        """
rule array:
     input:
        bam = expand("results/picard/{subsample}_trim_mapped_sorted_q2_nodup.bam", subsample = config["subsamples"])
     output:
        npz = "results/deeptools/{subsample}.npz"
     conda:
        "envs/deepTools-array.yaml"
     threads: 4
     log:
        "logs/array_{subsample}.log"
     message:
        "Concatenate all bam files : {input}"
     shell:
        """
        mkdir -p results/deeptools
        multiBamSummary bins --bamfiles {input.bam} -o {output.npz}
        """
rule deeptools:
     input:
        npz = "results/deeptools/{subsample}.npz",
     output:    
        png_Spea = "results/deeptools/{subsample}_heatmap_SpearmanCorr.png",
        png_Pear = "results/deeptools/{subsample}_heatmap_PearsonCorr.png"
     conda:
        "envs/deepTools-array.yaml"
     threads: 2
     log:
        "logs/deeptoolsCorr_{subsample}.log"
     message:
        "Correlation visualization : {input}"
     shell:
        """
        plotCorrelation -in {input.npz} \
        --corMethod spearman \
        --removeOutliers \
        --whatToPlot heatmap --plotNumbers \
        -o {output.png_Spea}  2>{log}
        plotCorrelation -in {input.npz} \
        --corMethod pearson \
        --removeOutliers \
        --whatToPlot heatmap --plotNumbers \
        -o {output.png_Pear}  2>{log}
        """
rule macs2: 
     input:
        "results/picard/{subsample}_trim_mapped_sorted_q2_nodup.bam"
     output:
        "results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_model.r",
        "results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_peaks.narrowPeak",
        "results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_peaks.xls",
        "results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_summits.bed"
     conda:
        "envs/macs2.yaml"
     threads: 8
     log:
        "logs/macs2_{subsample}.log"
     message:
        "Executing Identification of DNA access sites on : {input}"
     shell:
        """
        mkdir -p results/macs2
        macs2 callpeak -t {input} -n {wildcards.subsample}_trim_mapped_sorted_q2_nodup \
        -f BAM -g mm --outdir "results/macs2" 2>{log} 
        """
rule concat:
     input:
        zero = expand("results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_peaks.narrowPeak", subsample = config["bed_0h_samples"]),
        twentyfour = expand("results/macs2/{subsample}_trim_mapped_sorted_q2_nodup_peaks.narrowPeak", subsample = config["bed_24h_samples"])
     output:
        zero = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_0h_peaks.narrowPeak",
        twentyfour = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_24h_peaks.narrowPeak"
     threads: 6
     log:
        "logs/{subsample}_bedtools_concat.log"
     message:
        "Concatenation of zero samples on : {input}"
     shell:
        """
        mkdir -p results/bedtools
        cat {input.zero} > {output.zero}
        cat {input.twentyfour} > {output.twentyfour} 
        """
rule intersect_common:
     input:
        zero = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_0h_peaks.narrowPeak",
        twentyfour = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_24h_peaks.narrowPeak"
     output:
        "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_common.bed"
     conda:
        "envs/bedtools.yaml"
     threads: 6
     log:
        "logs/{subsample}_common.log"
     message:
        "Identification of common sites : {input}"
     shell:
        """
        bedtools intersect -a {input.zero} -b {input.twentyfour} > {output}
        """
rule merge:
     input:
        zero = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_0h_peaks.narrowPeak",
        twentyfour = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_24h_peaks.narrowPeak"
     output:
        
     conda:
        "envs/bedtools.yaml"
     threads: 6
     log:
        "logs/{subsample}_common.log"
     message:
        "Identification of common sites : {input}"
     shell:
        """
        bedtools intersect -a {input.zero} -b {input.twentyfour} > {output}

rule intersect_0h_unique:
     input:
        zero = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_0h_peaks.narrowPeak",
        twentyfour = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_24h_peaks.narrowPeak"
     output:
        "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_0h_unique.bed"
     conda:
        "envs/bedtools.yaml"
     threads: 6
     log:
        "logs/{subsample}_0h_unique.log"
     message:
        "Identification of 0h unique sites : {input}"
     shell:
        """
        bedtools intersect -v -a {input.zero} -b {input.twentyfour} > {output}
        """
rule intersect_24h_unique:
     input:
        zero = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_0h_peaks.narrowPeak",
        twentyfour = "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_combined_24h_peaks.narrowPeak"
     output:
        "results/bedtools/{subsample}_trim_mapped_sorted_q2_nodup_24h_unique.bed"
     conda:
        "envs/bedtools.yaml"
     threads: 6
     log:
        "logs/{subsample}_24h_unique.log"
     message:
        "Identification of 24h unique sites : {input}"
     shell:
        """
        bedtools intersect -v -a {input.twentyfour} -b {input.zero} > {output}
        """
